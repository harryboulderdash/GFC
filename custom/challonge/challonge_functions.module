<?php
/**
 * Function Description
 * @param function_parameter
 * @returns function output description
 */

function createGFCTournament($mynodeidparent) {
    include_once DRUPAL_ROOT . '/includes/challonge.class.php';


    // /********************************************************************************
    // //CREATE A TOURNAMENT and Update Drupal Tournaments Node with Challonge tourney ID
    //

    // Include the Challonge API Class
    //include('/opt/bitnami/apps/drupal/htdocs/includes/challonge.class.php');
    $c = new ChallongeAPI('XqrMnBPs15MvmX0izddB4zyIHKswRCoaIAyq4cTt');

    // get the GFC data needed to create tourney in Challonge
    //$mynodeidparent = 5; //test id for debugging
    $node = node_load($mynodeidparent);
    $wrapper = entity_metadata_wrapper('node',$node);

    // retreive param values needed from GFC data

    // get tourney name
    $tourney_name = $wrapper->field_tournament_name->value();

    // get type of play
    $term = taxonomy_term_load ( $wrapper->field_tournament_type->raw());
    $wrapper2 = entity_metadata_wrapper('taxonomy_term',$term);
    $tourney_type = $term->name;

    // get description
    $tourney_descriptions = $wrapper->field_tournament_description->value ();

    //get url value
    $tourney_url = (string)uniqid(); //str_replace ( ' ', '', $tourney_name ); // TODO: invent good url scheme

    // set paramater values for challonge from GFC values
    $params = array (
        "tournament[name]" => $tourney_name,
        "tournament[tournament_type]" => $tourney_type, // see if this can be dynamic
        "tournament[url]" => $tourney_url,
        "tournament[description]" => $tourney_descriptions
    );

    // call to challonge to create tournament
    $tournament = $c->makeCall ("tournaments",$params,"post");
    $tournament = $c->createTournament($params);

    //Save new URL value to GFC
    $wrapper->field_tournament_challonge_url->set($tourney_url);
    // save value
    $wrapper->save();

    // *************************
    // update GFC with returned tournament ID
    // *************************

    //****************NOTE: Need to reload by URL value from CHALLONGE due to bug
    $tournament_id = $tourney_url;
    $params = array("include_matches " => 0);
    $tournament = $c->makeCall("tournaments/$tournament_id", $params, "get");
    $tournament = $c->getTournament($tournament_id, $params);


    // retreive new tournament id and set to variable
    $challonge_id = (integer)$tournament->id;

    // id set value
    $wrapper->field_tournament_challonge_id->set($challonge_id);
    //set url value

    // save value
    $wrapper->save();

    watchdog('Challonge Response:',$c->result);

    return $c->result;

}

function StartTournament($tournamentid){
    include_once DRUPAL_ROOT . '/includes/challonge.class.php';

    //check in tournament
    //get team and match info and update GFC
    //start tournament

    //set for debug
    //$tournamentid = 211;

    $c = new ChallongeAPI('XqrMnBPs15MvmX0izddB4zyIHKswRCoaIAyq4cTt');

    //load up GFC tourney data
    $tourneywrapper = GetWrapperByEntityID($tournamentid);
    //$node = node_load($tournamentid);
    //$tourneywrapper = entity_metadata_wrapper('node',$node);

    $challongeid = $tourneywrapper->field_tournament_challonge_id->value();

//STEP 1 -- PUBLISH TOURNEY***********************

    // Publish a tournament -- WORKS!
    // http://challonge.com/api/tournaments/publish/:tournament
    //$tournament_id = $tournamentid;
    $params = array();
    $tournament = $c->makeCall("tournaments/publish/$challongeid", $params, "post");
    $tournament = $c->publishTournament($challongeid, $params);

    //step 1.5 randomize seeds
    $params = array();
    $participants = $c->makeCall("tournaments/$challongeid/participants/randomize", array(), "post");
    $tournament = $c->randomizeParticipants($challongeid, $params);


//STEP 2 -- START TOURNEY***********************

    // Start a tournament -- WORKS!
    // http://challonge.com/api/tournaments/start/:tournament
    $params = array();
    $tournament = $c->makeCall("tournaments/start/$challongeid", $params, "post");
    $tournament = $c->startTournament($challongeid, $params);


//STEP 3 --UPDATE TEAMS WITH TEAM IDs***********************

    // Get all participants -- WORKS!
    // http://challonge.com/api/tournaments/:tournament/participants
    $participants = $c->makeCall("tournaments/$challongeid/participants");
    $participants = $c->getParticipants($challongeid);

    //log response
    watchdog('Challonge respsonse:', print_r( $c->result ));

    // retrieve param values needed from GFC data

    //iterate through team gfc node ids
    foreach($tourneywrapper->field_tournament_teams_entered->getIterator() as $delta => $team){

        //set variable to team name
        $teamname = $team->field_team_id->value();
        //print $teamname . "<BR>";

        //update GFC teams with IDs
        foreach($participants as $participant){

            if(str_replace ( ' ', '',$participant->misc) == str_replace ( ' ', '',$teamname)){
                //if team matches name get id and update
                $team->field_team_challonge_id->set((integer)$participant->id);
                $team->save();
                print $participant->misc;
                //return;
            }

        }
    }


//STEP 4 -- CREATE MATCHES IN GFC***********************

    //Get all Matches -- WORKS! includes ids for team 1 and team 2 which could be used
    // http://challonge.com/api/tournaments/:tournament/matches
    //$tournament_id = $tournamentid;
    $params = array();
    $matches = $c->makeCall("tournaments/$challongeid/matches", $params);
    $matches = $c->getMatches($challongeid, $params);
    //print_r( $c->result );

    foreach($matches as $match){

        $values = array(
            'type' => 'match',
            'uid' => 1,
            'status' => 1,
            'comment' => 1,
            'promote' => 0,
        );

        //create match entity and wrap it
        $matchentity = entity_create('node', $values);
        $emw = entity_metadata_wrapper('node',$matchentity);


        //SAVE TIME BY Skiping the query if there is no team yet set for a match
        //ELSE Use challonge IDs to query for Team IDs and use values in match

        if((integer)$match->{'player1-id'}!=0 && (integer)$match->{'player2-id'}!=0) {
            //get team nids from team query
            $query = new EntityFieldQuery();

            $query->entityCondition('entity_type', 'node')
                ->entityCondition('bundle', 'team')
                ->fieldCondition('field_team_challonge_id', 'value', (integer)$match->{'player1-id'}, '=')
                ->addMetaData('account', user_load(1)); // Run the query as user 1.

            $result = $query->execute();


            if (isset($result['node'])) {
                $nodes = entity_load('node', array_keys($result['node']));
                foreach ($nodes as $node) {
                    $team1 = $node->nid;
                }
            }

            //get team nids from team 2 query
            $query2 = new EntityFieldQuery();

            $query2->entityCondition('entity_type', 'node')
                ->entityCondition('bundle', 'team')
                ->fieldCondition('field_team_challonge_id', 'value', (integer)$match->{'player2-id'}, '=')
                ->addMetaData('account', user_load(1)); // Run the query as user 1.

            $result2 = $query2->execute();

            if (isset($result2['node'])) {
                $nodes2 = entity_load('node', array_keys($result2['node']));
                foreach ($nodes2 as $node2) {
                    $team2 = $node2->nid;
                }

            }
        }


        //set field values
        $emw->field_match_challonge_id->set((integer)$match->id);
        $emw->field_match_round->set((integer)$match->round);
        $emw->title->set($tourneywrapper->field_tournament_name->value() . "_" . (string)$match->id);

        // only set teams if they are known
        if((integer)$match->{'player1-id'}!=0 && (integer)$match->{'player2-id'}!=0) {
            $emw->field_match_team_1->set((integer)$team1);
            $emw->field_match_team_2->set((integer)$team2);
            $emw->field_match_status->set("Ready For Play");
        }

        //save it out
        $emw->save();

        //add to tournament
        $tourneywrapper->field_tournament_match[] = $emw->nid->value();
        $tourneywrapper->save();

        //clear team id's for matches where participants are not yet known.
        $team1 = 0;
        $team2 = 0;

    }

    //Save new URL value to GFC
    $tourneywrapper->field_tournament_status->set("Started");
    // save value
    $tourneywrapper->save();


}

function UpdateMatchesDataFromAPI($tournament_id){
    //This function loads the Challonge API matches data for a tourney
    //and refreshes the match data in GFC
    //so as rounds complete
    //the new round team values are updated in GFC data
    //this should be called as each match result is added

    include_once DRUPAL_ROOT . '/includes/challonge.class.php';


    $c = new ChallongeAPI('XqrMnBPs15MvmX0izddB4zyIHKswRCoaIAyq4cTt');

    //load up tourney data
    $wrapper_t = GetWrapperByEntityID($tournament_id);

    //get API tourney ID for remote calls
    $challongeid = $wrapper_t->field_tournament_challonge_id->value();


    //Get all Matches -- WORKS!
    $params = array();
    $matches = $c->makeCall("tournaments/$challongeid/matches", $params);
    $matches = $c->getMatches($challongeid, $params);

    foreach($matches as $match){

        //load corresponding GFC match entity and wrap it
        $query3 = new EntityFieldQuery();

        $query3->entityCondition('entity_type', 'node')
            ->entityCondition('bundle', 'match')
            ->fieldCondition('field_match_challonge_id', 'value', (integer)$match->{'id'}, '=')
            ->addMetaData('account', user_load(1)); // Run the query as user 1.

        $result3 = $query3->execute();


        if (isset($result3['node'])) {
            $nodes3 = entity_load('node', array_keys($result3['node']));
            foreach ($nodes3 as $node3) {
                $emw = GetWrapperByEntityID($node3->nid);
            }
        }


        //SAVE TIME BY Skiping the query if there is no team yet set for a match
        //ELSE Use challonge IDs to query for Team IDs and use values in match

        if((integer)$match->{'player1-id'}!=0 && (integer)$match->{'player2-id'}!=0) {
            //get team nids from team query
            $query = new EntityFieldQuery();

            $query->entityCondition('entity_type', 'node')
                ->entityCondition('bundle', 'team')
                ->fieldCondition('field_team_challonge_id', 'value', (integer)$match->{'player1-id'}, '=')
                ->addMetaData('account', user_load(1)); // Run the query as user 1.

            $result = $query->execute();


            if (isset($result['node'])) {
                $nodes = entity_load('node', array_keys($result['node']));
                foreach ($nodes as $node) {
                    $team1 = $node->nid;
                }
            }

            //get team nids from team 2 query
            $query2 = new EntityFieldQuery();

            $query2->entityCondition('entity_type', 'node')
                ->entityCondition('bundle', 'team')
                ->fieldCondition('field_team_challonge_id', 'value', (integer)$match->{'player2-id'}, '=')
                ->addMetaData('account', user_load(1)); // Run the query as user 1.

            $result2 = $query2->execute();

            if (isset($result2['node'])) {
                $nodes2 = entity_load('node', array_keys($result2['node']));
                foreach ($nodes2 as $node2) {
                    $team2 = $node2->nid;
                }

            }
        }

        //set field values
        //$emw->field_match_challonge_id->set((integer)$match->id);
        //$emw->field_match_round->set((integer)$match->round);
        //$emw->title->set($tourneywrapper->field_tournament_name->value() . "_" . (string)$match->id);

        // only set teams if they are known
        if((integer)$match->{'player1-id'}!=0 && (integer)$match->{'player2-id'}!=0) {
            $emw->field_match_team_1->set((integer)$team1);
            $emw->field_match_team_2->set((integer)$team2);
            //if match was pending and now ready update status, don't update for matches in progress or completed
            if ($emw->field_match_status->value() == "Pending Prior Round") {
                $emw->field_match_status->set("Ready For Play");
                }
        }

        //save it out
        $emw->save();


        //clear team id's for matches where participants are not yet known.
        $team1 = 0;
        $team2 = 0;

        return $c->result;

    }

}

function UpdateMatchResult($tournament_id, $match_id, $team_1_score, $team_2_score, $isDisputed = 0){
    include_once DRUPAL_ROOT . '/includes/challonge.class.php';

    //UpdateMatchResult(30,35,2,1,31);

    try {
    //set to false until success
    $return = false;

    //instantiate challonge class
    $c = new ChallongeAPI('XqrMnBPs15MvmX0izddB4zyIHKswRCoaIAyq4cTt');

     //Load and update match team scores
    $w_match = GetWrapperByEntityID($match_id);

    //decide winner based on highest score
    //assumes no tie is possible
    //if a tie is possible, this needs to change!
            if ($team_1_score > $team_2_score) {
                $w_match->field_match_winner->set($w_match->field_match_team_1->nid->value());
            } else {
                $w_match->field_match_winner->set($w_match->field_match_team_2->nid->value());
            }

        //set team scores
        $w_match->field_match_team_1_score->set($team_1_score);
        $w_match->field_match_team_2_score->set($team_2_score);

        //Set status depending on if match result is in dispute
        if ($isDisputed != 0){
            $w_match->field_match_disputed->set(1);
            $w_match->field_match_status->set("Disputed Result");
        }
        else{
            $w_match->field_match_status->set("Scores Reported");
        }

        //update status
        $w_match->field_match_status->set("Scores Reported");

        $w_match->save();

        //Get Challonge IDs for external updates
        $challongeid_m =  $w_match->field_match_challonge_id->value();
        $challongeid = GetWrapperByEntityID($tournament_id)->field_tournament_challonge_id->value();

        //prep param values for Challonge
        $scores =  $team_1_score . "-" . $team_2_score;
        $params = array(
            "match[scores_csv]" => $scores,
            "match[winner_id]" => $w_match->field_match_winner->field_team_challonge_id->value()  //$winnerid
        );
        //execute calls to Challonge API
        $match = $c->makeCall("tournaments/$challongeid/matches/$challongeid_m", $params, "put");
        $match = $c->updateMatch($challongeid, $challongeid_m, $params);

        //log response
        watchdog('Challonge response:', print_r( $c->result ));

        //run update for all matches to get team assignments for next round
        UpdateMatchesDataFromAPI($tournament_id);

        return true;

    }
    catch (EntityMetadataWrapperException $exc) {
        watchdog(
            'challonge_functions.module',
            'See '  . __FUNCTION__ . '() <pre>' .$exc->getMessage() . $exc->getTraceAsString() . '</pre>',
            NULL, WATCHDOG_ERROR
        );
    }


}

function GetWrapperByEntityID($nid){

    //make updates to GFC data first
    $node = node_load($nid);
    $wrapper = entity_metadata_wrapper('node',$node);

    return $wrapper;
}

function getTournamentNodeIDByChallongeID($challongeTID){
    //get NID from Challonge tourney ID

    $query = new EntityFieldQuery();

    $query->entityCondition('entity_type', 'node')
        ->entityCondition('bundle', 'tournaments')
        ->fieldCondition('field_tournament_challonge_url', 'value', $challongeTID, '=')
        ->addMetaData('account', user_load(1)); // Run the query as user 1.

    $result = $query->execute();


    if (isset($result['node'])) {
        $nodes = entity_load('node', array_keys($result['node']));
        foreach ($nodes as $node) {
            $tournamentNID =  $node->nid;
        }
    }

    return $tournamentNID;
}

function getMatchNodeIDByChallongeID($challongeMID){
    //get NID from Challonge tourney ID

    $query = new EntityFieldQuery();

    $query->entityCondition('entity_type', 'node')
        ->entityCondition('bundle', 'match')
        ->fieldCondition('field_match_challonge_id', 'value', $challongeMID, '=')
        ->addMetaData('account', user_load(1)); // Run the query as user 1.

    $result = $query->execute();


    if (isset($result['node'])) {
        $nodes = entity_load('node', array_keys($result['node']));
        foreach ($nodes as $node) {
            $matchNID =  $node->nid;
        }
    }

    return $matchNID;
}

function getExistingTeamsByUser($currentUser){

    $currentUserID = $currentUser->uid;
    $userTeams = array();
    //team_members
    //field_team_member_user
    //field_team_reference_from_team_m

    $query = new EntityFieldQuery();

    $query->entityCondition('entity_type', 'team_members')
        ->entityCondition('bundle', 'team_members')
        ->fieldCondition('field_team_member_user', 'target_id', $currentUserID, '=')
        //  ->fieldCondition('field_marketer', 'target_id', $user->uid, '=');

        ->addMetaData('account', user_load(1)); // Run the query as user 1.

    $result = $query->execute();


    if (isset($result['team_members'])) {
        $teams = entity_load('team_members', array_keys($result['team_members']));

        //dpm($teams);
        foreach ($teams as $team) {
            //dpm($team);
            $userTeams[$team->field_team_reference_from_team_m['und'][0]['target_id']] =  GetWrapperByEntityID($team->field_team_reference_from_team_m['und'][0]['target_id'])->field_team_name->value();
        }
    }

    return $userTeams;

}

function getChallongeTournamentIDByNodeID($tournamentNID){
    //get challonge tourney ID from NID
    return GetWrapperByEntityID($tournamentNID)->field_tournament_challonge_id->value();
}

function getChallongeMatchIDByNodeID($matchNID){

    //get challonge tourney ID from NID
    return GetWrapperByEntityID($matchNID)->field_match_challonge_id->value();
}

/**
 * @param $tournamentID
 * @param $teamName
 * @param $currentUser
 */
function createTeamAndAddToTournament($tournamentID, $teamName, &$currentUser, $createTeam){
    include_once DRUPAL_ROOT . '/includes/challonge.class.php';

    //instantiate challonge API
    $c = new ChallongeAPI('XqrMnBPs15MvmX0izddB4zyIHKswRCoaIAyq4cTt');

    //if team is new create first then add to tournament, else just add to tournament
    if($createTeam) {
        try {

            //1. create and add team to team node

            //$tournament_id = ? //TODO:get current tourney ID context from variable, or url param
            //$currentuser = $GLOBALS['user'];

            $newTeamNode = new stdClass();
            $newTeamNode->type = 'team';
            $newTeamNode->title = $teamName;

            // Set the language.
            $newTeamNode->language = LANGUAGE_NONE;

            // Prepare and save the node.
            node_object_prepare($newTeamNode);
            $newTeamNode = node_submit($newTeamNode);
            $newTeamNode->revision = TRUE;
            node_save($newTeamNode);

            //print $newTeamNode->nid;
            //
            //wrap it
            $wrapper = GetWrapperByEntityID($newTeamNode->nid);//entity_metadata_wrapper('node', $newTeamNode);

            // USE TO ADD ENTITY REFERENCE BY NODE ID
            $wrapper->field_team_captain = $currentUser->uid;

            //generate random GFC team ID
            $teamID = (string)uniqid();

            //add team name
            $wrapper->field_team_name->set($teamName);
            $wrapper->field_team_id->set($teamID);

            $wrapper->save();

        //exception handler
        } catch (Exception $e) {
            _watchdog_log($e->getMessage());
        }

        //2. add user to team members as Captain

        try {

            //create team members entity and wrap it
            $entity = entity_create('team_members', array('type' => 'team_members'));
            $emw = entity_metadata_wrapper('team_members', $entity);

            //set field values
            $emw->field_team_reference_from_team_m = $newTeamNode->nid;
            $emw->field_team_member_role = 6; //captain taxonomy ID TODO, need to get this dynamically
            $emw->field_team_member_user = $currentUser->uid;

            //save it out
            $emw->save();

    //exception handler
        } catch (Exception $e) {
            _watchdog_log($e->getMessage());
        }

}

    //***3. add team to tournament
    //***NOTE: this step applies whether team is new OR existing

    //if existing team, use the NID parameter
    if(!$createTeam){$teamNID = $teamName;}else{$teamNID = $newTeamNode->nid;}

    try {
        //$tourneynode = node_load($tournamentID); //depends on tourney id being available
        $emwtourney = GetWrapperByEntityID($tournamentID);   //entity_metadata_wrapper('node',$tourneynode);
        $emwtourney->field_tournament_teams_entered[] = $teamNID;

        //save it out
        $emwtourney->save();

    //exception handler
    } catch (Exception $e) {
        _watchdog_log($e->getMessage());
    }


//4. add team to Challonge.

    try {

        //set team name variable
        if($createTeam){
            $teamName = $wrapper->field_team_name->value();
            $teamID = $wrapper->field_team_id->value();
        }
        else
        {
            $teamName = GetWrapperByEntityID($teamNID)->field_team_name->value();
            $teamID = GetWrapperByEntityID($teamNID)->field_team_id->value();

        }

        $tournament_challonge_id = (string)$emwtourney->field_tournament_challonge_id->value();
        $params = array(
            "participant[name]" => $teamName,
            "participant[seed]" => "1",
            "participant[misc]" => $teamID
        );

        $participant = $c->makeCall("tournaments/$tournament_challonge_id/participants", $params, "post");
        $participant = $c->createParticipant($tournament_challonge_id, $params);

        //log response
        watchdog('Challonge respsonse:', print_r( $c->result ));


        //generic function indicator message for test only
        drupal_set_message(t('Your team has been successfully entered in this tournament.'));

//exception handler
    } catch (Exception $e) {
        _watchdog_log($e->getMessage());
    }



    //
}